### Usage notes ##
#
# Two things are needed:
#
# 1. configure the package matching path in the "Detect changes" step below.
# This allows to match a "package" idenfifier to changes in a subdirectory.
# e.g.:
# my-package: '**/my-package/**'
#
# 2. configure the package in .github/js-packages.json .
# This allows to define variables that will be used in the pipeline.
# e.g:
# {
#   "my-package": {<-- the "package" identifier
#     "name": "@neuroglia/my-package", <-- the actual name of the package on the registry
#     "path": "./", <-- the path from where to run npm scripts
#     "dependencies": [] <-- the internal packages dependencies
#   } 
# }
###

name: Continous integration entry point for JS

on:
  push:
    branches: [ main ]
    paths:
      - 'projects/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'projects/**'

jobs:
  changes:
    # Skip if it's not running in the `neuroglia-io/js-framework` repo
    if: github.repository == 'neuroglia-io/js-framework'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      packages: ${{ steps.detection.outputs.changes }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Detect changes
        id: detection
        uses: dorny/paths-filter@v2
        with:
          filters: |
            common: 'projects/neuroglia/common/**'
            string-formatter: 'projects/neuroglia/string-formatter/**'
            logging: 'projects/neuroglia/logging/**'
            logging-transport-console: 'projects/neuroglia/logging-transport-console/**'
            integration: 'projects/neuroglia/integration/**'
            angular-logging: 'projects/neuroglia/angular-logging/**'
            angular-common: 'projects/neuroglia/angular-common/**'
            angular-oidc: 'projects/neuroglia/angular-oidc/**'
            angular-rest-core: 'projects/neuroglia/angular-rest-core/**'
            angular-signalr: 'projects/neuroglia/angular-signalr/**'
      
      - name: Defined output 'packages' as
        run: echo "${{ steps.detection.outputs.changes }}"

  pipeline:
    needs: changes
    continue-on-error: true
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.packages) }}
    uses: ./.github/workflows/js-package-pipeline.yml
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    with:
      package: ${{ matrix.package }}